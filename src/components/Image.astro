---
import { twMerge } from "tailwind-merge";
import { getImageProps } from "@sanity/lib/image";
import type { RawImage, Image } from "@/types";

interface Props {
  class?: string;
  image: RawImage;
  width?: number;
}

const { class: className, image: node, width } = Astro.props;
let image: Image | undefined;

try {
  image = node && node.asset && getImageProps({ image: node, maxWidth: width });
} catch (error) {
  console.error(error);
}
---

{
  image && (
    <figure class:list={[twMerge("relative", className)]}>
      <img
        class="block h-full w-full object-cover"
        loading="lazy"
        src={image.src}
        srcset={image.srcset}
        sizes={image.sizes}
        width={image.width}
        height={image.height}
        alt={node.alt || ""}
        title={node.alt}
      />
      <img
        class="pointer-events-none absolute inset-0 top-0 left-0 block h-full w-full object-cover transition-opacity"
        src={image.placeholder}
        width={image.width}
        height={image.height}
        alt=""
        aria-hidden="true"
        role="presentation"
        loading="eager"
      />
    </figure>
  )
}

<script>
  document.addEventListener("astro:page-load", () => {
    const figures = document.querySelectorAll("figure");

    figures.forEach((figure) => {
      const img = figure.querySelector("img");
      const placeholder = figure.querySelector("img[role='presentation']");

      if (!img || !placeholder) return;

      img.onload = () => {
        placeholder.classList.add("opacity-0");
      };

      if (img.complete) {
        placeholder.classList.add("opacity-0");
      }
    });
  });
</script>
